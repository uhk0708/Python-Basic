# -*- coding: utf-8 -*-
"""python_16_inter-mid_사용자정의함수, 람다함수.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J3byy6sDOs0kFkLMRF0G6253dMPMSPWb

1. 사용자 정의 함수
"""

def plus(v1,v2):
    result = 0 # 초기화
    result = v1 + v2
    return result

# 전역 변수 선언

sum = 0 # 초기화

print(plus(100,200))

sum = plus(100,200)
print("v1과 v2의 plus()함수 결과는 %d"%sum)

def calc(v1, v2, op):
    result = 0 # 초기화
    if op == '+' :
        result = v1 + v2
    elif op == '-':
        result = v1 - v2
    elif op == '*':
            result = v1 * v2
    elif op == '/':
            result = v1 / v2

    return result

# 전역 변수 선언

res = 0 # 초기화
var1, var2, oper = 0, 0, ""

oper = input("계산할거죠? 어여 입력해 보세요. 단 (+,-,*,/ 여기서 택 1): ")
var1 = int(input('첫번째 숫자 입력하세요.'))
var2 = int(input('두번째 숫자 입력하세요.'))

res = calc(var1, var2, oper)
print("멀캠 최첨단 AI 계산기: %d %s %d = %d"%(var1,oper, var2,res))

"""지역변수 vs 전역변수"""

def f1():
    a = 10 # 지역 변수(함수 내 존재 , local variables)
    print('함수1에서 a 값: %d'%a)

def f2():
    print('함수2에서 a 값: %d'%a)


# 전역 변수 선언
a = 30

f1()
# 지역변수 a 값 출력

f2()
# 전역변수 a 값 출력

def f3():
    b = 10 # 지역변수
    print('함수3에서 b 값: %d'%b)

def f4():
    print('함수4에서 b 값: %d'%b)

f3()

'''
f4()
NameError: name 'b' is not defined
왜? b가 정의 안됨
'''

# global 옵션 사용(**): 전역변수 명시

def f3():
    global b
    b = 10 # 지역변수
    print('함수3에서 b 값: %d'%b)

def f4():
    print('함수4에서 b 값: %d'%b)

f3()

f4()

def f5():
    a = 10  # 지역변수
    print('함수 5에서 a값: %d'%a)

def f6():
    print('함수 6에서 a값: %d'%a)

a = 20 # 전역변수

f5()

f6()

def 나():
    print("닥터윌")

print(나())

# 반환값이 없는 함수

def f7():
    result = 100
    return result

def f8():
    print("반환값이 없다")

sum = 0 # 초기화 >> 전역변수

sum = f7() # 함수의 객체화 >> 변수

print('f7()에서 반환한 값: %d'%sum)

f8()

# 반환값이 여러 개(2개 이상)인 함수

def f9(v1, v2):
    reslist =[] # 반환할 빈 리스트 생성
    res1 = v1 + v2
    res2 = v1 - v2

    reslist.append(res1)
    reslist.append(res2)

    return reslist

mylist = []

sum,sub = 0,0 # 초기화

mylist = f9(100,200)
# print(mylist) #[300, -100]

sum = mylist[0]
sub = mylist[1]

#print(sum) #300
#print(sub) #100

print('f9에서 반환한 값: %d, %d'%(sum, sub))

"""함수 매개변수 전달하는 방식 3가지
- 매개변수 개수를 정확히 지정해서 전달하는 방법
- 매개변수에 기본값을 설정해 놓고 전달하는 방법
- 매개변수 개수를 지정하지 않고 전달하는 방법 >> 가변 매개변수
"""

# 매개변수 개수를 정확히 지정하는 경우

# 숫자 2개, 숫자 3개 >> 합 구하기

def num2(v1,v2):
    result = 0 # 초기화
    result = v1 + v2
    return result


def num3(v1,v2,v3):
    result = 0 # 초기화
    result = v1+v2+v3
    return result

sum = 0 # 전역변수

print(num2(10,20), num3(10,20,30))
print()
print(num2(10,20) + num3(10,20,30))

print(type(num2(10,20))) # int(정수)

# 매개변수에 기본값(default) 설정하고 전달하는 방법

def num_three(a,b,c=0): # c=0 기본값 설정됨
    result = 0 # 초기값
    result = a+b+c
    return result

sum = 0 # 초기화 (전역변수)

sum = num_three(10,20)
print(sum)

num_three(10,20,30)

# num_three(10)
# TypeError: num_three() missing 1 required positional argument: 'b'

# 매개변수 개수를 지정하지 않고 전달하는 방법
# >> 가변 매개변수

def func_able(*para): # * : tuple, para : parameter
    res = 0
    for num in para:
        res += num
    return res

sum = 0
sum = func_able(10,20)
print("매개변수가 2개인 함수를 호출한 결과: %d"%sum)

sum = func_able(10,20,30)
print("매개변수가 3개인 함수를 호출한 결과: %d"%sum)

sum = func_able(10,20,30,40,50,60,70,80,90)
print("매개변수가 9개인 함수를 호출한 결과: %d"%sum)

dict_ = {7: "son", 777:"drwill", 8:"zzuyi"}
print(dict_[7])
print(dict_.keys())
print(list(dict_.keys()))

def dict_func(**para): # ** dict
    for k in para.keys():
        print("%s는 %d 명의 걸그룹이예요"%(k, para[k]))

dict_func(르세라핌=4, 뉴진스=5)

"""람다함수(lambda 함수) (****) 익명함수
- 익명함수(이름없은 함수) : 함수의 단축형(일회용)
"""

# 일반함수 def

def f(x, y):
    return x * y

print(f(10,3))

# 람다함수

f1 = lambda x: x+2
print(f1(2))

f2 = lambda x, y : x*y
print(f2(1,2))

# 매개변수에 기본값(default) 설정

f3 = lambda f3: x+y
f3()

print(f3(100,200))

"""람다함수 map() 함수가 만나면?"""

list_1 = [1,2,3,4]
add10 = lambda num: num+10

# print(add10(list_1))
# TypeError: can only concatenate list (not "int") to list

print(add10(list_1[0]))
print(add10(list_1[2]))

print(type(add10(list_1[0])))

print(list(map(add10, list_1)))

list_1 = [1,2,3,4,5]
list_2 = [11,12,13,14,15]

add = lambda n1, n2 : n1 + n2

list(map(add, list_1, list_2))

# 재귀함수 : 자기 자신을 호출하는 함수

def count(n):
    if n >=1 :
        print(n, end=" ")
        count(n-1)

    else:
        return

print(count(20))

count(1)

count(-3)

# 팩토리얼(factorial) 값 구하는 함수

def factorial(n):
    if n<=1:
        return n
    else:
        return n*factorial(n-1)

print(factorial(4))

# 평균과 평점을 출력하는 grade()  사용자 정의 함수 만들기

def grade(*scores):
    score_sum = 0 # 초기화
    score_list = []

    for score in scores:
        score_sum += score

    score_avg = round(score_sum / len(scores),2)

    if score_avg >= 90:
        grade = 'A'
    elif score_avg >= 80:
        grade = 'B'
    elif score_avg >= 70:
        grade = 'C'
    elif score_avg >= 60:
        grade = 'D'
    else:
        grade = 'F'

    score_list.append(score_avg)
    score_list.append(grade)

    return score_list

print(grade(84,95,70,60))

print(grade(100,100,60))

round(25.1234, 2)

# adsp 3과목, 정보처리기사 5과목있어요
# 자, 전체 평균 60점 이상이면 합격, 과목당 40점 미만 불합격
# 전체 60점 이상이여도 한 과목이라도 40점이면 불합격(과락)
# 코드 짜 보세요

# 출력물: 전체 평균 점수, 과목당 점수, 합격여부

def grade(*scores): # parameter(매개변수)을 여러 개 받을 수 있음(* : tuple)
    score_sum = 0 # 초기화
    score_list = []
    ac = "" # 합격 여부(합격, 불합격)

    for score in scores:
        if score < 40:
            ac = '불합격'
        score_sum += score

    score_avg = round(score_sum / len(scores), 2)

    if score_avg >= 60 and ac!= '불합격':
        ac = '합격'
    else:
        ac = '불합격'


    score_list.append(score_avg)
    score_list.append(scores)
    score_list.append(ac)

    return score_list

gr = grade(100,50,70,80,30)

print(f'평균: {gr[0]} 과목당 점수: {gr[1]} 합격여부: {gr[2]}')

# 정수를 리스토 받기

input().split(',')

data = input().split(',')

list(map(int, data))

def func_pf(*scores):
    score_sum = 0
    score_list = []
    pass_fail =''

    for score in scores:
        if score < 40:
            pass_fail = '과락'
            break

        score_sum += score

    score_avg = round(score_sum / len(scores),1)

    if pass_fail == '과락':
        score_list.append(score_avg)
        score_list.append(pass_fail)
        score_list.append(scores)

    else:
        if score_avg >=60:
            pass_fail ='합격'
        else:
            pass_fail ="불합격"

        score_list.append(score_avg)
        score_list.append(pass_fail)
        score_list.append(scores)

    return score_list

# 입력받기

input_scores = []

for i in range(1,6):
    input_scores.append(int(input('점수를 입력하세요: ')))

list_input = func_pf(*input_scores)

print('평균점수: %.2f'%list_input[0])
print('합격여부: %s'%list_input[1])
print(f'과목점수: {list_input[2]}')

"""[교육생 작품]"""

def grade (*score) :
  score_sum = 0 # 초기화
  score_list = []

  for score in scores:
    score_sum += score

  score_avg = score_sum / len(scores)
  scores.sort()

  if score_avg >= 60 and scores[0]>40 :
    grade = '합격'
  else :
    grade = '과락'

  score_list.append(score_avg)
  score_list.append(grade)
  return score_list

scores = [40,60,70,80,90]
print(grade(scores))

def grade(*scores):
  score_sum = 0
  score_list = []

  for score in scores:
    if score < 40 :
      print(f"{score}점 과목 불합격")
      pass
    score_sum += score

  score_avg = score_sum / len(scores)

  if score_avg >= 60:
    grade = '합격'
  else:
    grade = '불합격'

  score_list.append(score_avg)
  score_list.append(grade)
  return score_list


print(grade(20,80))

del sum

def grade(*scores):
    total_score = sum(scores)
    score_avg = total_score / len(scores)
    score_avg_rounded = round(score_avg, 2)

    for score in scores:
        if score < 40:
            return score_avg_rounded, scores, "불합격: 과락"


    if score_avg >= 60:
        return score_avg_rounded, scores, "합격"
    else:
        return score_avg_rounded, scores, "불합격: 평균 점수 미달"

scores = []
print("점수를 입력하세요. 완료되면 '완료'라고 입력하세요.")

while True:
    입력 = input("점수: ")
    if 입력.lower() == '완료':
        break
    try:
        점수 = int(입력)
        scores.append(점수)
    except ValueError:
        print("유효하지 않은 점수입니다. 숫자를 입력해주세요.")

score_avg, scores, status = grade(*scores)

print("\n전체 평균 점수:", score_avg)
print("과목당 점수:", scores)
print("합격여부:", status)

# adsp 3과목 / 정처기 5과목
# 평균 60점 이상 합격 / 과목당 40점 미만 불합격
def grade(*score):
  score_sum = 0
  score_avg = 0
  p_f = ""

  for i in score:
    if i < 40 :
      p_f = 'fail'
      print(f"한과목의 점수가 40점 아래입니다. 합불결과: {p_f} ")
    else :
      score_sum += i

  score_avg = round(score_sum / len(score),2)

  if score_avg >= 60 :
    if p_f == "fail": #이미 한과목의 점수가 40점 아래일경우
      print(f"평균점수 : {score_avg}. 합불결과: fail")
    else :
      print(f"평균점수 : {score_avg}. 합불결과: pass")
  else :
      print(f"평균점수 : {score_avg}. 합불결과: fail")

grade(40,100,100,39,100)

