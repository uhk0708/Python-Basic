# -*- coding: utf-8 -*-
"""11_python_w/chatGPT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wPwM5MDmr90c_oNb9RJFD4FXVyLJOt-T
"""

# print()는 실행할 때, 내가 볼 수 있도록 실행화면에 "출력"하는 명령어
# 괄호() 안에 값을 넣어줌

print("hello")

"""변수"""

# 변수에 값 할당하기
age = 25
name = "John"
is_student = True

# 변수 값 출력하기
print("나이:", age)
print("이름:", name)
print("학생 여부:", is_student)

print("hello, 닥터윌~")
myname ="카리나"
print("hello " + myname + "!")

"""문자열"""

name = "Alice"
greeting = '안녕하세요!'
print("이름:", name)
print("인사말:", greeting)

# 우리가 사용하는 두 개 이상의 문자가 모이면 >> 문자열이라고 함
# 문자열은 따옴표 안에 문자를 집어 넣음

myname = "닥터윌"

"""숫자"""

# 정수
num1 = 10
num2 = -5
result = num1 + num2
print("덧셈 결과:", result)  # 출력: 5

# 실수
pi = 3.14
radius = 2.5
area = pi * (radius ** 2)
print("원의 넓이:", area)  # 출력: 19.625

# 숫자는 소수점이 없는 것(정수)와 있는 것(소수)로 나뉨

num1 = 10
num2 = 1.2
myname = "닥터윌"

# 어떻게 다른지 type() 을 사용해서 확인
print(type(num1))
print(type(num2))
print(type(myname))

"""참/거짓(boolean: bool)"""

# 참/거짓
# 참/거짓은 따옴표 없이 첫 글자를 대문자로 사용해요
is_adult = True
is_woman = False
# 이걸 왜 쓰지? 조건문에서 사용함

is_student = True
is_adult = False

print("학생 여부:", is_student)
print("성인 여부:", is_adult)

"""리스트(list)"""

# 리스트는 말 그대로 목록

fruits = ['사과','배','감']
# 리스트 안에는 아무거나 들어갈 수 있음(숫자, 문자 상관없음)

print(fruits[0]) # index는 0부터 시작함

fruits.append('망고')
print(fruits)

# 리스트 생성하기
numbers = [1, 2, 3, 4, 5]
fruits = ["사과", "바나나", "오렌지"]
mixed_list = [10, "hello", True, 3.14]

# 리스트 요소에 접근하기 (**)
print("첫 번째 과일:", fruits[0])  # 출력: 사과
print("두 번째 숫자:", numbers[1])  # 출력: 2

# 리스트 요소 수정하기 (*)
fruits[0] = "체리"
print("수정된 첫 번째 과일:", fruits[0])  # 출력: 체리

# 리스트에 요소 추가하기 (**)
fruits.append("포도")
print("추가된 과일:", fruits)  # 출력: ["체리", "바나나", "오렌지", "포도"]

# 리스트에서 요소 제거하기
fruits.remove("바나나")
print("제거된 과일:", fruits)  # 출력: ["체리", "오렌지", "포도"]

"""딕셔너리(dictionary)"""

# 말 그대로 사전 !

a_dict = {} # 빈 딕셔너리 생성 (초기화)
print(a_dict)

a_dict = {'name': '김현우', 'age': 25} # 값을 채운 딕셔너리 생성

# a_dict의 값은?
print(a_dict)

# a_dict['name']  의 값은?
# a_dict['name'] >> key에 접근, value 값 추출
print(a_dict['name'])

# 사전 생성하기
student = {
    "이름": "홍길동",
    "나이": 20,
    "성별": "남성"
}

# key를 사용하여 값에 접근하기
print("이름:", student["이름"])  # 출력: 홍길동
print("나이:", student["나이"])  # 출력: 20

# 사전 값 수정하기
student["나이"] = 25
print("수정된 나이:", student["나이"])  # 출력: 25

# 새로운 키-값 쌍 추가하기
student["학교"] = "고려대학교"
print("추가된 학교 정보:", student)  # 출력: {'이름': '홍길동', '나이': 25, '성별': '남성', '학교': '고려대학교'}

# 키를 사용하여 사전에서 항목 제거하기
del student["성별"]
print("제거된 성별 정보:", student)  # 출력: {'이름': '홍길동', '나이': 25, '학교': '고려대학교'}

"""문자열 응용"""

# 문자열 간의 더하기는 두 문자열을 이어붙인 문자열

first_name = "Harry"
last_name = "Porter"

print(first_name + " " + last_name)
# " " : 띄어쓰기도 특수 "문자"

a = "3"
b = "5"

print(a+b)

'''
a = "3"
b = 5

print(a+b)
TypeError: can only concatenate str (not "int") to str

문자열과 숫자형은 더할 수 없다
'''

# 위 문제를 해결하기 위해서 숫자 간 더하는 것으로 바꾸자 (문자 >> 숫자)

a = "3"
b = 5

a = int(a)

print(a+b)

# 그럼 문자열에 숫자를 담은 것은 언제 쓰지?
# 문자와 숫자를 조합하는 경우에 사용

myteam = "drwill"
myid = "55"

mynumber = myteam + myid

print(mynumber)

"""특정 문자를 기준으로 문자열 나누기"""

# 이메일 주소에서 도메인 'gmail' 만 추출하기

myemail = 'test@gmail.com'

print(myemail)
print(myemail.split('@'))
print('-------------------------------')
result = myemail.split('@')
print(result[0])
print(result[1])

result2 = result[1].split('.')
print(result2)

print(result2[0]) # gmail >> 우리가 알고 싶었던 것(어떤 이메일 계정 사용하는지 파악)
print(result2[1]) # com

# 한 줄로 한 번에 처리하고파 (method chaining 메서드 체인)
myemail.split('@')[1].split('.')[0]

"""특정 문자를 다른 문자로 바꾸기"""

txt = '서울시-마포구-망원동'
print(txt.replace('-', '>'))

"""질의응답"""

'''
이메일이나 주소를 사용하다 보면 옛날에 co.kr 이런거 쓰던경우가 있었는데
이때 .을 기준으로 분리하면 co 와 kr 도 분리되어 버리는데 이부분은 분리 안되게 할려면 어떻게 해야하나요?
'''

mail = 'yahoo.co.kr'
a = mail.split('.')
print(a , type(a))

print('-' * 30)

b = '.'.join([a[1], a[2]])     # join() 함수는 문자열을 이어붙이는 함수입니다.
print(b, type(b))

mail.split('.', maxsplit=1)

# mail 문자열에서 '.' 기준, 최대한 옵션(1번)만 분리해 >> 리스트로 반환

mail.split('.', maxsplit=2)

"""join() 함수"""

과일 = ['사과','배','딸기']

'-'.join(과일)

import re
# 정규표현식 (re: regular expresion)

homepage = 'drwill.co.kr'
parts = re.split(r'\.', homepage)[-2:]
# 정규표현식(re)의 split()함수 사용
# r'\.' : '.'을 기준, 문자열 분리
# 그 중 마지막 두 부분을 선택 >> 리스트로 반환

result = ".".join(parts)

print(result)

re.split(r'\.', homepage)