# -*- coding: utf-8 -*-
"""python_14_inter_mid_리스트,_딕셔너리,_반복문.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C_1e2SME9LdIppfBwZgZJjePJOnaZfKd

1. 리스트(list)
"""

a, b, c, d = 10,20,30,40

print(a)
print(d)

aa = [10,20,30,40]

print(aa[0]) # indexing : 특정한 값을 추출
print('----')
print(aa[-2])

# list 와 range 활용

list(range(10))

a  = list(range(10))
print(a)
print(type(a))

# 역순 출력
list(range(10,0, -1))

# 홀수 출력
list(range(1,10, 2))

# 문자 출력
list("drwill")

# for 문과 함께 사용
a = [10,20,30,40]

for i in a:
    print(i)

# enumerate(**) : index와 요소(element)를 함께 출력
a = [10,20,30,40]

for i, v in enumerate(a):
    print(i,v)

a = [10,20,30,40]

for i, v in enumerate(a, start=1):
    print(i,v)

# 리스트 합 구하기

a = [10,20,30,40]

sum = 0 # 초기화

for i in range(4):
    sum = sum + a[i]

    # 과정확인
    #print(i)
    #print(sum) # 과정마다의 누적합

print(sum)

list(range(4))

a = [10,20,30,40]

sum = 0 #초기화

for i in range(4):
    sum = sum + i

print(sum)

# [실전] 리스트 합 구하기 (출처: bm 기출)

# 리스트 초기화

aa = [ ] # 빈 리스트 생성

for i in range(0,4):
    aa.append(0)


sum = 0 # 초기화

# 리스트에서 자료 입력 받기

for i in range(0,4):
    aa[i] = int(input(str(i+1)+"번째 숫자:"))

# 리스트 합 구하기
for i in range(0,4):
    sum = sum + aa[i]

# 리스트 값 구하세요
print("총합: %d"%sum)

[1] + [2]

# 리스트의 indexing 과 slicing

a = [10,20,30,40,50,60,70,80,90]

print(a[:-1])

print(a[0:-1])

a[:len(a)]

len(a)

a[:len(a)-1]

a[1:1]

a[:7]

a[:]

a[1] = 200
print(a)

a[1] = [300,301]
print(a)

print(a[1])
print(a[1][1])

del a[1]

print(a)

a[1:4] = []
print(a)

del(a[:2])
print(a)

b = [40,50,60]

a + b

b * 3

"""2. 리스트 조작함수"""

# 1) count(값)

c = [40,50,60,60,70,70,70,80,90]

print(c.count(60))
print(c.count(70))

# 2) reverse() : 리스트에서 요소의 순서를 역순 출력
print(c)
c.reverse() # method로 접근
print(c)

list(reversed(c))

print(c)

# sort() : 리스트 요소를 오름차순(default)으로 정렬
c = [90, 80, 70, 70, 70, 60, 60, 50, 40]
print(c)
c.sort() # 오름차순 정렬 >> c가 완전 변경됨

print(c)

c.sort(reverse=True) # 내림차순 정렬
print(c)

"""sort vs sorted"""

f = [40,50,60,70,80,90]
sorted(f)
print(f)

sorted(f, reverse=True)

print(f)

f.sort()

print(f)

"""리스트 복사
- 얕은 복사(shallow copy / soft copy)
- 깊은 복사(deep copy)
"""

# 참고 (판다스 이용, 데이터분석)
# raw = dataframe(행렬 구조-2차원) data
# df = raw.copy()

# shallow(soft) copy

a = [1,2,3,4]
b = a

print(a, b)

a is b

# 리스트 요소 값 변경
b[2] = 100
b

print(a, b)
# 동일하게 변경됨

# 깊은 복사(deep copy)

b = a.copy()

a == b

a is b
# b는 a의 copy 본(복제판 A급)

print(a,b)

# 값 변경 시도
b[2] = 3
print(a,b)

"""append와 extend
- append() : 리스트 맨 뒤에 요소 추가
- extend() : 리스트 결합
"""

print(a)

a.append(30)
print(a)

print(a, b)

b

a.extend(b)

print(a)

"""집합(set)
- 중복 제거, 순서에 상관없음

질의 응답
"""

a = [1, 2, 100, 4, 30, 1, 2, 3, 4]
print(a)

print(set(a))

set_a = set(a)
list(set_a)

"""inset()
- 리스트 특정 index 요소 추가
"""

f = [10,20,30]

f.insert(2, 500) # inset(index, value)
print(f)

f.insert(len(f), 200)

print(f)

"""pop()
- 해당 index(idx) 요소를 삭제(맨 뒤에거 가져오기)
"""

g = [10,20,30]

g.pop()

print(g)

"""del vs remove
- del 은 delete 약자, 특정 인덱스 값 삭제
- remove는 list에서 특정 '값' 찾아서 삭제
"""

print(g)

# del
del g[1]

print(g)

# remove

h = [1,2,3]
h.remove(3)
print(h)

"""clear()
- 요소를 완전 제거
"""

a = [10,20,30]
a.clear()

print(a)

a = [10,20,30]
a = []

print(a)

"""질의 응답"""

a, b, c, d = 10, 20, 30, 40

# cf
e =  10, 20, 30, 40

print(a)
print(type(a))
print('-'*20)
print(e)
print(type(e))

# cf. %d,%f,%s
# %f : float 소수 >> 실수

#.2%f : 소수점 2째자리 (.00)

value = 3.1458855
formatted_value = "%.2f"% value

print(formatted_value)

value = 3.1458855
formatted_value = "%d"% value

print(formatted_value)

value = 3.1458855
formatted_value = "%f"% value

print(formatted_value)

value = 3.1458855
formatted_value = "%2.3f"% value

print(formatted_value)
# 너비 2자 필드 내에 숫자가 오른쪽으로 정렬됨

"""[실습] 연유라떼 얼마일까요?"""

menu = ['아메리카노','밀크티','연유라떼','카푸치노','카페라떼']
price = [2500,4500,4000,3500,4000]

연유라떼 = price[2] #4000
print('{}원입니다'.format(연유라떼))

list(zip(menu, price))

#dict()(**)
dict(zip(menu, price))

dict(zip(menu, price))['밀크티']

coffee = dict(zip(menu, price))
coffee['연유라떼']

연유라떼 = dict(zip(menu, price))['연유라떼']
print('{}원입니다.'.format(연유라떼))

# [실습]카페라떼는 얼마일까요?
menu = ['아메리카노','밀크티','연유라떼','카푸치노','카페라떼']
price = [2500,4500,4000,3500,4000]

coffee = dict(zip(menu, price))
print(coffee['카페라떼'])

latte_idx = menu[-1]
latte_price = price[-1]

print("{}원입니다.".format(latte_price))

# index()

menu.index('카페라떼')

print(price)

price[menu.index('카페라떼')]

price[4]

"""리스트 컴프리헨션(list comprehension)"""

print(list(range(10)))

type([])

[i for i in list(range(10))]

[i+5 for i in list(range(10))]

[i*2 for i in list(range(10))]

# 리스트 컴프리헨션과 if 조건문 함께 사용해 보기

[i for i in list(range(10)) if i%2 ==0] #조건: 짝수

[i for i in list(range(10)) if i%2 ==1] #조건: 홀수

# 문제 발견

'''
a = [1.2, 3.4, 5.6, 7.8]
int(a)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'list'
'''

# map() (**)

a = [1.2, 3.4, 5.6, 7.8]

# for 반복문
for i in range(len(a)):
    a[i] = int(a[i])

print(a)

# map()

a = [1.2, 3.4, 5.6, 7.8]

list(map(int, a))

list(map(str, a))

# 튜플(상수)

t1 = (10,20,30)

t1, type(t1)

t2 = 10,20,30 ; t2

t2 = 10,20,30
t2

a = () ; a

tuple([1,2,3])

# water : 물, 물을 주다

tuple(range(10))

tuple(range(10,0,-1))

list(tuple(range(10,0,-1)))

t1 = list(tuple(range(10,0,-1)))
t1[2] = 24
t1

'''
t2 = tuple(range(10,0,-1))
t2[2] = 24
t2
TypeError: 'tuple' object does not support item assignment
'''

# dict()
# key : value

stu = {'stu_id': 7, 'name':'son', 'dept':'kfa'}
print(stu)

# key로 접근
stu['name']

print(stu.keys())

list(stu.keys())

print(stu.values())

list(stu.values())

stu['contact'] = '010-1234-5678'
stu

stu.items()

list(stu.items())

for k, v in stu.items():
    print(k, v)

stu['addr'] = 'tottenham'
stu

del(stu['contact'])

stu

# in 연산자

if 'origin_of_birth' not in stu:
     stu['ob']= 'wonju'

stu

if 'email' not in stu:
    stu['email'] = stu['name'] + '@mulcam.com'

stu

# 성별(남/여 여부)

stu['gender'] = input('성별을 입력하세요: ')

stu

# 해보세요
# 여러분의 원하는 지원자 번호, 이름, 별명(애칭), 주요 스킬, 주소, 이메일주소, 성별, 연락처(010-1234-5678)

# 지원하는 자 입장
지원자_정보 = {
    "지원자 번호": 1234,
    "이름": "닥터윌",
    "별명": "코딩목사",
    "주요 스킬": ["파이썬","판다스","SQL","웹/앱","머신러닝","딥러닝"],
    "주소": "대한민국 대치동",
    "이메일주소": "drwill@naver.com",
    '성별': "남",
    '연락처': "010-1234-5678"
}

print(지원자_정보)

# 회사 인사교육팀 입
지원자_정보 = {
    "지원자 번호": int(input('지원번호: ')),
    "이름": input("성명: "),
    "별명": input("별명: "),
    "주요 스킬": input("주요 스킬: "),
    "주소": input("주소: "),
    "이메일주소": input("이메일 주소(123@email.com): "),
    '성별': input("성별(남/여): "),
    '연락처': input("연락처(010-1234-5678): ")
}

print(지원자_정보)

# for 문 활용, bts 딕셔너리 모든 값 출력해 보기

singer = {}

singer['이름'] = 'bts'
singer['팀구성원'] = 7
singer['대표곡'] = 'dynamite'

for k in singer.keys():
    print('%s >> %s'%(k, singer[k]))

# for 문 활용, black pink 딕셔너리 모든 값 출력해 보기

singer_ = {}

singer_['이름'] = 'black pink'
singer_['팀구성원'] = 4
singer_['대표곡'] = '마지막처럼'
for k in singer.keys():
    print(f'{k} >> {singer_[k]}')

# while 문 활용, menu 궁합 프로그램 만들기

menu = {
    '떡뽁이': '순대',
    '짜장면': '단무지',
    '라면':"김치",
    '피자':'피클',
    '맥주':"땅콩",
    '치킨':'치킨무',
    '삼겹살':'파채'
}

while 1:
    a = input("좋아하는 음식은? '떡볶이', '짜장면, '라면' ,'피자','맥주','치킨','삼겹살'")
    if a in menu:
        print(f'궁합음식: {a} ---> {menu[a]}')
    elif a == 'q':
        break # 정지조건
    else:
        print('그런 음식은 여기에 없어요. 다시 입력하라우')

menu = {
    '떡뽁이': '순대',
    '짜장면': '단무지',
    '라면':"김치",
    '피자':'피클',
    '맥주':"땅콩",
    '치킨':'치킨무',
    '삼겹살':'파채'
}

# print(menu.keys())

while True:
    menu_name = list(menu.keys())
    a = input('좋아하는 음식은?' + str(menu_name))
    if a in menu_name:
        print(menu[a])
    else:
        print('그런 음식 취급 안해요.')
        break

menu = {
    '떡뽁이': '튀김',
    '짜장면': '단무지',
    '라면':"김치",
    '피자':'코카콜라',
    '맥주':"땅콩",
    '치킨':'소떡소떡',
    '삼겹살':'소주'
}

while True:
    땡겨요 = input("저녁은 뭐 먹고 싶니?" + str(list(menu.keys())))
    if 땡겨요 in menu:
        print('궁합에 맞는 음식은 이거야: %s -----> %s'%(땡겨요, menu.get(땡겨요)))
    elif 땡겨요 == '그만해':
        break
    else:
        print("너는 꼭 없는 것만 찾더라... 있는 거에서 다시 말해봐 ")
    print('*'* 30)